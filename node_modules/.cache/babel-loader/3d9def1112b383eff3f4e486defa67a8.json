{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\gtanu\\\\Desktop\\\\Assignment_noteapp\\\\noteapp\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport SidebarComponent from './sidebar/sidebar';\nimport EditorComponent from './editor/editor';\nimport { firebase } from '@firebase/app';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {\n      firebase.firestore().collection('notes').onSnapshot(serverUpdate => {\n        const notes = serverUpdate.docs.map(_doc => {\n          const data = _doc.data();\n\n          data['id'] = _doc.id;\n          return data;\n        });\n        this.setState({\n          notes: notes\n        });\n      }); //\n    };\n\n    this.selectNote = (note, index) => {\n      this.setState({\n        selectedNoteIndex: index,\n        selectedNote: note\n      });\n    };\n\n    this.noteUpdate = (id, noteObj) => {\n      firebase.firestore().collection('notes').doc(id).update({\n        title: noteObj.title,\n        body: noteObj.body,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      });\n    };\n\n    this.newNote = async () => {\n      const note = {\n        title: '',\n        body: ''\n      };\n      const newFromDB = await firebase.firestore().collection('notes').add({\n        title: note.title,\n        body: note.body,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      });\n      const newID = newFromDB.id;\n      await this.setState({\n        notes: [...this.state.notes, note]\n      });\n      const newNoteIndex = this.state.notes.indexOf(this.state.notes.filter(_note => _note.id === newID)[0]);\n      this.setState({\n        selectedNote: this.state.notes[newNoteIndex],\n        selectedNoteIndex: newNoteIndex\n      });\n    };\n\n    this.deleteNote = async note => {\n      const noteIndex = this.state.notes.indexOf(note);\n      await this.setState({\n        notes: this.state.notes.filter(_note => _note !== note)\n      });\n\n      if (this.state.selectedNoteIndex === noteIndex) {\n        this.setState({\n          selectedNoteIndex: null,\n          selectedNote: null\n        });\n      } else {\n        this.state.notes.length > 1 ? this.selectNote(this.state.notes[this.state.selectedNoteIndex - 1], this.state.selectedNoteIndex - 1) : this.setState({\n          selectedNoteIndex: null,\n          selectedNote: null\n        });\n      }\n\n      firebase.firestore().collection('notes').doc(note.id).delete();\n    };\n\n    this.state = {\n      selectedNoteIndex: null,\n      selectedNote: null,\n      notes: null\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(SidebarComponent, {\n        selectedNoteIndex: this.state.selectedNoteIndex,\n        notes: this.state.notes,\n        selectNote: this.selectNote,\n        deleteNote: this.deleteNote,\n        newNote: this.newNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), this.state.selectedNote ? /*#__PURE__*/_jsxDEV(EditorComponent, {\n        selectedNote: this.state.selectedNote,\n        selectedNoteIndex: this.state.selectedNoteIndex,\n        notes: this.state.notes,\n        noteUpdate: this.noteUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/gtanu/Desktop/Assignment_noteapp/noteapp/src/App.js"],"names":["React","SidebarComponent","EditorComponent","firebase","App","Component","constructor","componentDidMount","firestore","collection","onSnapshot","serverUpdate","notes","docs","map","_doc","data","id","setState","selectNote","note","index","selectedNoteIndex","selectedNote","noteUpdate","noteObj","doc","update","title","body","timestamp","FieldValue","serverTimestamp","newNote","newFromDB","add","newID","state","newNoteIndex","indexOf","filter","_note","deleteNote","noteIndex","length","delete","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SidebarComponent from './sidebar/sidebar'\nimport EditorComponent from './editor/editor'\nimport { firebase } from '@firebase/app'\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      selectedNoteIndex: null,\n      selectedNote: null,\n      notes: null\n    }\n  }\n  render(){\n    return(\n      <div className=\"app-container\">\n        <SidebarComponent\n          selectedNoteIndex={this.state.selectedNoteIndex}\n          notes={this.state.notes}\n          selectNote = {this.selectNote}\n          deleteNote = {this.deleteNote}\n          newNote = {this.newNote}/>\n\n        {\n          this.state.selectedNote ?\n          <EditorComponent\n            selectedNote={this.state.selectedNote}\n            selectedNoteIndex={this.state.selectedNoteIndex}\n            notes={this.state.notes}\n            noteUpdate = {this.noteUpdate}/> :\n          null\n        }\n\n      </div>\n    )\n  }\n\n  componentDidMount = () => {\n    firebase\n    .firestore()\n    .collection('notes')\n    .onSnapshot(serverUpdate => {\n      const notes= serverUpdate.docs.map(_doc => {\n        const data = _doc.data()\n        data['id'] = _doc.id\n        return data\n      })\n      this.setState({notes:notes})\n    }) //\n  }\n\n  selectNote = (note,index) => {\n    this.setState({ selectedNoteIndex:index, selectedNote:note})   \n  }\n\n  noteUpdate = (id, noteObj) => {\n    firebase\n    .firestore()\n    .collection('notes')\n    .doc(id)\n    .update({\n      title: noteObj.title,\n      body: noteObj.body,\n      timestamp:firebase.firestore.FieldValue.serverTimestamp()\n    })\n  }\n\n  newNote = async () => {\n    const note = {\n      title: '',\n      body: ''\n    }\n    const newFromDB = await firebase\n    .firestore()\n    .collection('notes')\n    .add({\n      title:note.title,\n      body:note.body,\n      timestamp:firebase.firestore.FieldValue.serverTimestamp()\n    })\n    const newID = newFromDB.id\n    await this.setState({ notes: [...this.state.notes, note] })\n    const newNoteIndex = this.state.notes.indexOf(this.state.notes.filter(_note => _note.id===newID)[0])\n    this.setState({ selectedNote:this.state.notes[newNoteIndex], selectedNoteIndex:newNoteIndex })\n  }\n\n  deleteNote = async(note) => {\n    const noteIndex = this.state.notes.indexOf(note)\n    await this.setState({ notes: this.state.notes.filter(_note => _note!==note) })\n    if(this.state.selectedNoteIndex===noteIndex){\n      this.setState({ selectedNoteIndex:null, selectedNote:null })\n    } else {\n      this.state.notes.length > 1 \n      ?\n      this.selectNote(this.state.notes[this.state.selectedNoteIndex -1], this.state.selectedNoteIndex -1)\n      :\n      this.setState({ selectedNoteIndex:null, selectedNote:null })\n    }\n    firebase\n    .firestore()\n    .collection('notes')\n    .doc(note.id)\n    .delete()\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}